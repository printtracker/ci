on:
  workflow_call:
    inputs:
      context:
        type: string
        default: .
      dockerfile:
        type: string
      latest:
        type: boolean
        default: true
      image:
        type: string
        default: ${{github.repository}}
    outputs:
      image-tag:
        description: The tag of the image that was created
        value: ${{jobs.Containerize.outputs.image-tag}}

jobs:
  Containerize:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{steps.sha.outputs.tag}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set tag and hash
        id: sha
        run: |
          export HASH=$(git rev-parse --short HEAD);
          export VERSION=$(git describe --tags);
          FIRST=$(git describe --tags|sed 's/^\(.\).*/\1/');
          if [ "$FIRST" == "v" ]; then 
            VERSION=$(git describe --tags|sed 's/^.\{1\}//');
          fi
          echo $HASH
          echo $VERSION

          # If the version is empty, then set the version to the hash
          # otherwise set the version to the git tag
          if [ "$VERSION" == "" ]; then 
            echo "::set-output name=tag::$HASH"
          else
            echo "::set-output name=tag::$VERSION"
          fi
          echo "::set-output name=sha::$HASH"

          # Reformat the ref name so that slashes are replaced with underscores.
          # This is required if we want to use the ref name as a Docker tag
          echo "::set-output name=ref::$(echo '${{github.ref_name}}' | sed 's/\//_/')"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{inputs.context}}
          file: ${{inputs.dockerfile}}
          push: true
          # Create tagged Docker images for the actual commit tag, then 
          # the branch name (for caching) and the latest if the inputs 
          # specify that a 'latest' tag should be created. Only create
          # a branch tag if the ref name of the branch does not contain
          # the tag name. 
          tags: |
            ghcr.io/${{inputs.image}}:${{steps.sha.outputs.tag}}
            ghcr.io/${{inputs.image}}:${{steps.sha.outputs.branch}}
            ${{ (inputs.latest == true && format('ghcr.io/{0}:latest', inputs.image)) || '' }}
          cache-from: type=registry,ref=ghcr.io/${{inputs.image}}:${{steps.sha.outputs.branch}}
          cache-to: type=inline
          build-args: |
            VERSION=${{steps.sha.outputs.tag}}
            HASH=${{steps.sha.outputs.sha}}