on:
  workflow_call:
    inputs:
      context:
        type: string
        default: .
      dockerfile:
        type: string
      latest:
        type: boolean
        default: true
      image:
        type: string
        default: printtracker-webadmin/${{github.repository}}
      use-gar:
        description: Whether to upload Docker images to Google Artifact Registry
        type: boolean
        default: true
      registry:
        type: string
        default: us-west1-docker.pkg.dev
      artifact:
        type: string
    outputs:
      image-tag:
        description: The tag of the image that was created
        value: ${{jobs.version.outputs.tag}}
      image:
        description: The full image (including tag) that was created
        value: ${{jobs.containerize.outputs.image}}

jobs:
  version:
    name: Version
    uses: printtracker/ci/.github/workflows/version.yml@master
    secrets: inherit
  containerize:
    runs-on: ubuntu-latest-m
    # runs-on: [self-hosted, docker, Linux]
    name: Containerize
    needs: version
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - run: git config --global url."https://ptkrbot:${{secrets.BOT_TOKEN}}@github.com".insteadOf "https://github.com"
      # - uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: ${{ secrets.BOT_SSH_PRIVATE_KEY }}
          
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ !inputs.use-gar }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Login to GAR
        uses: docker/login-action@v2
        if: ${{ inputs.use-gar }}
        with:
          registry: ${{ inputs.registry }}
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}
      - name: Get registry name
        id: registry
        run: |
          echo "registry=${{ (inputs.use-gar && inputs.registry) || 'ghcr.io' }}" >> $GITHUB_OUTPUT
      - name: Generated Artifacts
        uses: actions/download-artifact@v4
        if: ${{ inputs.artifact != '' }}
        with:
          name: ${{ inputs.artifact }}
          path: ${{ inputs.artifact }}
          retention-days: 1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{inputs.context}}
          file: ${{inputs.dockerfile}}
          push: true
          # Create tagged Docker images for the actual commit tag, then 
          # the branch name (for caching) and the latest if the inputs 
          # specify that a 'latest' tag should be created. Only create
          # a branch tag if the ref name of the branch does not contain
          # the tag name. 
          tags: |
            ${{steps.registry.outputs.registry}}/${{inputs.image}}:${{needs.version.outputs.tag}}
            ${{steps.registry.outputs.registry}}/${{inputs.image}}:${{needs.version.outputs.ref}}
            ${{(inputs.latest == true && format('{0}/{1}:latest', steps.registry.outputs.registry, inputs.image)) || '' }}
          cache-from: type=registry,ref=${{steps.registry.outputs.registry}}/${{inputs.image}}:${{needs.version.outputs.ref}}
          cache-to: type=inline
          build-args: |
            VERSION=${{needs.version.outputs.tag}}
            HASH=${{needs.version.outputs.sha}}
            GITHUB_TOKEN=${{secrets.BOT_TOKEN}}
            DD_GIT_REPOSITORY_URL=github.com/${{ github.repository }}
            DD_GIT_COMMIT_SHA=${{ github.sha }}
      - name: Output image
        id: image
        run: echo "image=${{steps.registry.outputs.registry}}/${{inputs.image}}:${{needs.version.outputs.tag}}" >> $GITHUB_OUTPUT
